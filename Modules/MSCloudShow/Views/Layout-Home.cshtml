@functions {
  // To support the layout classifaction below. Implementing as a razor function because we can, could otherwise be a Func<string[], string, string> in the code block following.
  string CalcuClassify(string[] zoneNames, string classNamePrefix) {
    var zoneCounter = 0;
    var zoneNumsFilled = string.Join("", zoneNames.Select(zoneName => { ++zoneCounter; return Model[zoneName] != null ? zoneCounter.ToString() : ""; }).ToArray());
    return HasText(zoneNumsFilled) ? classNamePrefix + zoneNumsFilled : "";
  }
}
@{
  /* Global includes for the theme
    ***************************************************************/

  SetMeta(httpEquiv: "X-UA-Compatible", content: "IE=edge,chrome=1");

  /*Styles*/
  Style.Include("jquery.bxslider.min.css");
  Style.Include("font-awesome.min.css");
  Style.Include("animate.min.css");
  Style.Include("http://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic");

  Style.Include("bootstrap.min.css");
  Style.Include("main.min.css");
  Style.Include("custom-styles.min.css");

  /*Scripts*/
  Script.Require("jQuery").AtHead().UseCdn(true);
  Script.Include("modernizr-2.6.2-respond-1.1.0.min.js");
  Script.Include("bootstrap.min.js").AtFoot();
  Script.Include("main.js").AtFoot();
  Script.Include("jquery.bxslider.min.js").AtFoot();

  /* Some useful shortcuts or settings
  ***************************************************************/

  Func<dynamic, dynamic> Zone = x => Display(x); // Zone as an alias for Display to help make it obvious when we're displaying zones

  /* Layout classification based on filled zones
  ***************************************************************/

  //Add classes to the wrapper div to toggle aside widget zones on and off
  var asideClass = CalcuClassify(new[] { "AsideFirst", "AsideSecond" }, "aside-"); // for aside-1, aside-2 or aside-12 if any of the aside zones are filled
  if (HasText(asideClass)) {
    Model.Classes.Add(asideClass);
  }

  //Add classes to the wrapper div to toggle tripel widget zones on and off
  var tripelClass = CalcuClassify(new[] { "TripelFirst", "TripelSecond", "TripelThird" }, "tripel-"); // for tripel-1, triple-2, etc. if any of the tripel zones are filled
  if (HasText(tripelClass)) {
    Model.Classes.Add(tripelClass);
  }

  //Add classes to the wrapper div to toggle quad widget zones on and off
  var footerQuadClass = CalcuClassify(new[] { "FooterQuadFirst", "FooterQuadSecond", "FooterQuadThird", "FooterQuadFourth" }, "split-"); // for quad-1, quad-2, etc. if any of the quad zones are filled
  if (HasText(footerQuadClass)) {
    Model.Classes.Add(footerQuadClass);
  }

  /* Inserting some ad hoc shapes
  ***************************************************************/

  WorkContext.Layout.Header.Add(New.Branding(), "5"); // Site name and link to the home page
  WorkContext.Layout.Footer.Add(New.BadgeOfHonor(), "5"); // Powered by Orchard
  WorkContext.Layout.Footer.Add(New.User(), "5"); // Login and dashboard links

  /* Last bit of code to prep the layout wrapper
  ***************************************************************/

  Model.Id = "layout-wrapper";
  var tag = Tag(Model, "div"); // using Tag so the layout div gets the classes, id and other attributes added to the Model

}

@using (Script.Foot()) {
    <!--BxSlider - Animation options (horizontal, vertical, or fade) For full list of options check out www.bxslider.com -->
  <script>
    $(document).ready(function () {
      $('.bxslider').bxSlider({
        mode: 'fade',
        auto: true,
        pause: 4000,
        autoHover: false,
        touchEnabled: true,
        adaptiveHeight: false,
        autoControls: false
      });
    });
  </script>

}

@tag.StartElement
<div class="navbar navbar-inverse navbar-fixed-top">
  <div class="navbar-inner">
    <div class="container">
      <a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </a>
      <div class="brand">
        @if (Model.Header != null) {
          @Zone(Model.Header)
        }
      </div>

      @if (Model.Navigation != null) {
        <div class="nav-collapse collapse">
          @Zone(Model.Navigation)
        </div>
      }
    </div>
  </div>
</div>
<div style="height:109px;">&nbsp;</div>
@if (Model.Slider != null) {
  <section id="header">
    <div class="container">
      <div class="row">
        <div class="span12">

          @Zone(Model.Slider)
          <!--BxSlider-->
          @*<ul class="bxslider">
                <li>
                <img src="/Themes/Sharkfin/Content/images/header1.png" alt="Title" />
                <div class="row text-center">
                    <div class="span10 offset1">
                    <h1>Welcome to Sharkfin, an incredibly unique web and mobile experience for your users.</h1><br />
                    <a class="btn-main" href="about.html">Learn More</a>
                    </div>
                </div>
                </li>

                <li>
                <img src="/Themes/Sharkfin/Content/images/header2.png" alt="Title" />
                <div class="row text-center">
                    <div class="span10 offset1">
                    <h1>Built to look good on all devices. Resize your browser to take a look for yourself.</h1><br />
                    <a class="btn-main" href="about.html">Learn More</a>
                    </div>
                </div>
                </li>
            </ul>*@

        </div>
      </div>
    </div>
  </section>
}
@if (Model.TripelFirst != null || Model.TripelSecond != null || Model.TripelThird != null) {
  <section id="home-content">
    <div class="container">
      <div class="row">

        @if (Model.TripelFirst != null) {
          <a href="#">
            <div class="span4 text-center home-box">
              @Zone(Model.TripelFirst)
            </div>
          </a>
        }

        @if (Model.TripelSecond != null) {
          <a href="#">
            <div class="span4 text-center home-box">
              @Zone(Model.TripelSecond)
            </div>
          </a>
        }

        @if (Model.TripelThird != null) {
          <a href="#">
            <div class="span4 text-center home-box">
              @Zone(Model.TripelThird)
            </div>
          </a>
        }
      </div>
    </div>
  </section>
}
@if (Model.Content != null) {
  <section id="content">
    <div class="container">
      @Zone(Model.Content)
    </div>
  </section>
}

@if (Model.Clients != null) {
  <section id="clients">
    <div class="container">
      <div class="row clients text-center">
        @Zone(Model.Clients)
      </div>
    </div>
  </section>
}

@if (Model.FooterQuadFirst != null || Model.FooterQuadSecond != null || Model.FooterQuadThird != null || Model.FooterQuadFourth != null) {
  <section id="blue-container">
    <div class="container">
      <div class="row margin-50">
        @if (Model.FooterQuadFirst != null) {
          <div class="span3">
            @Zone(Model.FooterQuadFirst)
          </div>
        }
        @if (Model.FooterQuadSecond != null) {
          <div class="span3">
            @Zone(Model.FooterQuadSecond)
          </div>
        }
        @if (Model.FooterQuadThird != null) {
          <div class="span3">
            @Zone(Model.FooterQuadThird)
          </div>
        }

        @if (Model.FooterQuadFourth != null) {
          <div class="span3">
            @Zone(Model.FooterQuadFourth)
          </div>
        }
      </div>

    </div>
  </section>
}
@if (Model.Messages != null) {
  <section id="message">
    <div class="container">

      <div class="row">
        <div class="span10 offset1 text-center">
          @Zone(Model.Messages)
        </div>
      </div>

    </div>
  </section>
}

@if (Model.AfterMain != null) {
  <section id="bottom">
    <div class="container">
      @Zone(Model.AfterMain)
    </div>
  </section>
}

<section id="footer">
  <div class="container">
    @if (Model.Footer != null) {
      <div class="row">
        <div class="span12 text-center">
          @Zone(Model.Footer)
        </div>
      </div>
    }
  </div>
</section>
@tag.EndElement